{"version":3,"sources":["message_log_3/events.cljs"],"mappings":"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","names":["message-log-3.events/clj->json","ds","js/JSON","cljs.core/clj->js","re_frame.core.reg_event_db","day8.re-frame.tracing/is-trace-enabled?","+debux-dbg-opts+","day8.re-frame.debux.common.util/send-form!","result__31818__auto__","day8.re-frame.debux.common.util/send-trace!","e","e35405","_","message-log-3.db/default-db","re_frame.core.reg_event_fx","p__35406","vec__35407","cljs.core.nth","e35410","p__35411","vec__35412","handler","p__35415","p__35416","map__35417","cljs.core/--destructure-map","cljs.core.get","vec__35418","e35421","p__35422","p__35423","map__35424","vec__35425","db","active-panel","cljs.core.assoc","p__35428","vec__35429","id","val","cljs.core/assoc-in","p__35432","vec__35433","input","cljs.core.conj","js/Date","messages","merged","cljs.core.dissoc","message-log-3.events/handler","response","js/console","p__35436","map__35437","ajax.core/json-request-format","ajax.core/json-response-format","p__35438","vec__35439","map__35442","msg","cljs.core.println","p__35443","vec__35444","map__35447","data","cljs.pprint.pprint"],"sourcesContent":["(ns message-log-3.events\n  (:require [ajax.core :as ajax]\n            [clojure.pprint :as pp]\n            [day8.re-frame.http-fx]\n            [day8.re-frame.tracing :refer-macros [fn-traced]]\n            [message-log-3.db :as db]\n            [cljs.reader :as reader]\n            [ajax.core :refer [GET POST]]\n            [re-frame.core :as re-frame]))\n\n(defn clj->json\n  [ds]\n  (.stringify js/JSON (clj->js ds)))\n\n(re-frame/reg-event-db\n ::initialize-db\n (fn-traced [_ _]\n            db/default-db))\n\n(re-frame/reg-event-fx\n  ::navigate\n  (fn-traced [_ [_ handler]]\n   {:navigate handler}))\n\n(re-frame/reg-event-fx\n ::set-active-panel\n (fn-traced [{:keys [db]} [_ active-panel]]\n   {:db (assoc db :active-panel active-panel)}))\n\n(re-frame/reg-event-db\n ::update-db\n (fn [db [_ id val]]\n   (assoc-in db [:form id] val)))\n\n(re-frame/reg-event-db\n ::update-list\n (fn [db [_ id]]\n   (let [input (conj {:unix-time (.now js/Date)} (:form db))\n         messages (get db :msg [])\n         merged (conj messages input)]\n     (do (assoc db :msg merged)\n         (assoc db :input input)))))\n\n(re-frame/reg-event-db\n ::clear-input\n (fn [db]\n   (dissoc db :form)))\n\n(defn handler [response]\n  (.log js/console (str response)))\n\n(re-frame/reg-event-fx\n ::submit\n (fn [{:keys [db]}]\n   {:http-xhrio {:method          :POST\n                 :uri             \"/submit\"\n                ;;  :params          (clj->json {:msg (:msg db)})\n                  :params          {:input (:input db)}\n                ;;  :params          (clj->json {:input (:input db)})\n                 :timeout         8000\n                 :format          (ajax/json-request-format)\n                 :response-format (ajax/json-response-format {:keywords? true})\n                 :on-success      [::success-post-result]\n                 :on-failure      [::failure-post-result]}}\n   ))\n\n(re-frame/reg-event-db\n ::good-http-result\n (fn [db [_ {:keys [msg]}]]\n   (do (println msg)\n       (assoc db :msg msg))))\n\n(re-frame/reg-event-fx\n ::bad-http-result\n (fn [db [_ {:keys [data]}]]\n   (do (println data)\n       (println \"fail init\"))))\n\n(re-frame/reg-event-fx\n ::read-msg-txt\n (fn []\n   {:http-xhrio {:method          :GET\n                 :uri             \"/init\"\n                 :timeout         8000                                           ;; optional see API docs\n                 :response-format (ajax/json-response-format {:keywords? true})  ;; IMPORTANT!: You must provide this.\n                 :on-success      [::good-http-result]\n                 :on-failure      [::bad-http-result]}}))\n\n(re-frame/reg-event-fx\n ::success-post-result\n (fn []\n   (pp/pprint \"done brayy\")))\n\n(re-frame/reg-event-fx\n ::failure-post-result\n (fn []\n   (pp/pprint \"fail brayy\")))"]}