{"version":3,"sources":["day8/re_frame_10x/components/cljs_devtools.cljs"],"mappings":"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","names":["cljs.core/deref","day8.re-frame-10x.components.cljs-devtools/default-config","devtools.prefs/default-config","day8.re-frame-10x.components.cljs-devtools/base-config","ambiance","syntax-color-scheme","day8.re_frame_10x.inlined_deps.garden.v1v3v10.garden.core.style","day8.re-frame-10x.styles/gs-2","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units/px","day8.re-frame-10x.styles/gs-5","day8.re-frame-10x.styles/syntax-color","day8.re-frame-10x.styles/gs-50","day8.re-frame-10x.styles/gs-12","day8.re-frame-10x.components.cljs-devtools/body-style-base","day8.re-frame-10x.styles/nord3","day8.re-frame-10x.components.cljs-devtools/dark-ambiance-config","day8.re-frame-10x.styles/nord0","day8.re-frame-10x.styles/nord6","day8.re-frame-10x.components.cljs-devtools/bright-ambiance-config","day8.re-frame-10x.components.cljs-devtools/custom-config","cljs.core.merge","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","day8.re-frame-10x.components.cljs-devtools/header","p__36622","vec__36623","map__36626","cljs.core.nth","cljs.core/--destructure-map","cljs.core.get","seq36619","G__36620","cljs.core/first","cljs.core/next","G__36621","self__4851__auto__","value","config","render-paths?","previous-config__36592__auto__","devtools.prefs/get-prefs","prefs__36593__auto__","devtools.prefs/set-prefs!","cljs.core._EQ_","js/Error","devtools.formatters.core/header-api-call","day8.re-frame-10x.components.cljs-devtools/body","p__36639","vec__36640","map__36643","seq36630","G__36631","G__36636","devtools.formatters.core/body-api-call","day8.re-frame-10x.components.cljs-devtools/has-body","devtools.formatters.core/has-body-api-call","day8.re-frame-10x.components.cljs-devtools/get-object","jsonml","day8.re-frame-10x.components.cljs-devtools/get-config","day8.re-frame-10x.components.cljs-devtools/jsonml-style-factory$","style-name36665","params36666","style36683","day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.runtime/compile-css","factory-name36667","day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.util/factory->name","day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.runtime/ensure-style!","day8.re-frame-10x.components.cljs-devtools/jsonml-style","day8.re-frame-10x.components.cljs-devtools/toggle-style-factory$","style-name36690","params36691","base-style36700","key__35708__auto__","cljs.core/meta","name36699","fexpr__36708","day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.util/build-style-name","style36696","cljs.core.into","factory-name36692","day8.re-frame-10x.components.cljs-devtools/toggle-style","day8.re-frame-10x.styles/nord5","day8.re-frame-10x.components.cljs-devtools/data-structure","_","path","expanded?","day8.re_frame_10x.inlined_deps.re_frame.v1v1v2.re_frame.core.subscribe","day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core/dispatch","day8.re-frame-10x.material/arrow-drop-down","day8.re-frame-10x.material/arrow-right","and__4251__auto__","G__36740","G__36741","day8.re-frame-10x.components.cljs-devtools/jsonml->hiccup","cljs.core.conj","G__36742","G__36743","p__36750","map__36751","day8.re-frame-10x.components.cljs-devtools/data-structure-with-path-annotations","indexed-path","devtools-path","update-path-fn","object","opts","G__36753","G__36754","G__36755","G__36756","day8.re-frame-10x.components.cljs-devtools/jsonml->hiccup-with-path-annotations","day8.re_frame_10x.components.cljs_devtools.body","G__36759","G__36760","G__36761","G__36762","day8.re-frame-10x.components.cljs-devtools/string->css","css-string","clojure.string.split","p1__36763#","cljs.core.map","cljs.core.reduce","p__36764","vec__36765","acc","property","cljs.core.assoc","cljs.core.keyword","vec__36770","seq__36771","cljs.core/seq","first__36772","tag-name","attributes","children","tagnames","cljs.core/contains?","cljs.core.js__GT_clj","cljs.core.map_indexed","i","child","G__36773","G__36775","G__36776","G__36777","p__36782","map__36783","click-listener","menu-listener","vec__36787","seq__36788","first__36789","G__36790","G__36791","G__36792","G__36793","index","cljs.core/last","id","cljs.core/random-uuid","child-element","child-value","js/Array","cljs.core/Keyword","day8.re_frame_10x.inlined_deps.reagent.v1v0v0.reagent.core.create_class","component","day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.dom/dom-node","goog.events/listen","cljs.core.partial","G__36798","G__36799","G__36800","G__36801","G__36802","G__36803","G__36804","G__36805","day8.re-frame-10x.components.cljs-devtools/prn-str-render?","data","js/RegExp","cljs.core/boolean?","day8.re-frame-10x.components.cljs-devtools/prn-str-render-style-factory$","style-name36808","params36809","style36811","factory-name36810","day8.re-frame-10x.components.cljs-devtools/prn-str-render-style","day8.re-frame-10x.components.cljs-devtools/prn-str-render","cljs.core.prn_str","day8.re-frame-10x.components.cljs-devtools/simple-render","p__36819","vec__36820","seq36816","G__36817","G__36818","class","day8.re-frame-10x.components.re-com/box","day8.re-frame-10x.components.cljs-devtools/popup-menus","cljs.core.atom","day8.re-frame-10x.components.cljs-devtools/event-log","day8.re-frame-10x.components.cljs-devtools/build-popup","viewing-path","html-element","temp__5751__auto__","rendered?","popup-menu","js/goog.ui.PopupMenu","js-menu-style","js/goog.style.toStyleAttribute","create-menu-item","menu-text","js/goog.ui.MenuItem","js/goog.dom.createDom","goog.dom.TagName/DIV","goog.dom.TagName/SPAN","G__36823","copy-path-item","copy-obj-item","copy-repl-item","element-rect","x-pos","js/window","y-pos","G__36828","G__36829","G__36830","G__36831","js/goog.object.forEach","js/goog.ui.Component.EventType","type","js/goog.events.listen","e","cljs.core/empty?","cljs.core/peek","class-names","cljs.core.swap_BANG_","cljs.core/conj","cljs.core/some","class-name","path-obj","day8.re-frame-10x.tools.reader.edn/read-string-maybe","nested?","cljs.core/count","cljs.core.subvec","cljs.core.get_in","or__4253__auto__","day8.re-frame-10x.fx.clipboard/copy!","js/console.error","cljs.core/assoc","day8.re-frame-10x.components.cljs-devtools/current-data","day8.re-frame-10x.components.cljs-devtools/simple-render-with-path-annotations","p__36870","p__36871","map__36872","vec__36873","seq36852","G__36857","G__36858","G__36859","sort?","cljs.core.not_EQ_","cljs.core/reset!","cljs.core/map?","cljs.core/sorted-map","cljs.core/second","obj","event","target","btn","day8.re_frame_10x.components.cljs_devtools.header","cljs.core/List"],"sourcesContent":["(ns day8.re-frame-10x.components.cljs-devtools\n  (:require-macros\n    [day8.re-frame-10x.components.cljs-devtools                   :refer [with-cljs-devtools-prefs]])\n  (:require\n    [clojure.string :as string]\n    [devtools.prefs]\n    [devtools.formatters.core]\n    [goog.dom]\n    [goog.events]\n    [goog.style]\n    [goog.ui.PopupMenu]\n    [goog.ui.MenuItem]\n    [goog.ui.Component]\n    [goog.object]\n    [day8.re-frame-10x.inlined-deps.re-frame.v1v1v2.re-frame.core :as rf]\n    [day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.core    :refer [style]]\n    [day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.units   :refer [px]]\n    [day8.re-frame-10x.inlined-deps.spade.git-sha-93ef290.core    :refer [defclass]]\n    [day8.re-frame-10x.components.re-com                          :as rc]\n    [day8.re-frame-10x.material                                   :as material]\n    [day8.re-frame-10x.styles                                     :as styles]\n    [day8.re-frame-10x.panels.app-db.events                       :as app-db.events]\n    [day8.re-frame-10x.panels.app-db.subs                         :as app-db.subs]\n    [day8.re-frame-10x.fx.clipboard                               :as clipboard]\n    [day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.core   :as r]\n    [day8.re-frame-10x.inlined-deps.reagent.v1v0v0.reagent.dom    :as dom]\n    [day8.re-frame-10x.tools.reader.edn                           :as reader.edn])\n  (:import\n    [goog.dom TagName]))\n\n(def default-config @devtools.prefs/default-config)\n\n(defn base-config\n  [ambiance syntax-color-scheme]\n  {:index-tag                              [:span :none-style]\n   :min-expandable-sequable-count-for-well-known-types\n                                           3\n   ; Hide the index spans on the left hand of collections. Shows how many elements in a collection.\n   :none-style                             (style {:display :none})\n\n   ; Our JSON renderer does not have hierarchy depth limit,\n   ; See https://github.com/binaryage/cljs-devtools/blob/master/src/lib/devtools/formatters/budgeting.cljs\n   :initial-hierarchy-depth-budget         false\n\n   :header-style                           (style {:white-space :nowrap})\n   :expandable-style                       (style {:white-space  :nowrap\n                                                   :padding-left styles/gs-2})\n   :expandable-inner-style                 (style {:margin-left (px -2)})\n   :item-style                             (style {:display     :inline-block\n                                                   :white-space :nowrap\n                                                   :border-left [[(px 2) :solid :#000]]\n                                                   :padding     [[0 styles/gs-5 0 styles/gs-5]]\n                                                   :margin      [[(px 1 0 0 0)]]})\n   :fn-header-style                        \"\"\n   :fn-prefix-style                        \"\"\n   :nil-style                              (style {:color (styles/syntax-color ambiance syntax-color-scheme :nil)})\n   :keyword-style                          (style {:color (styles/syntax-color ambiance syntax-color-scheme :keyword)})\n   :integer-style                          (style {:color (styles/syntax-color ambiance syntax-color-scheme :integer)})\n   :float-style                            (style {:color (styles/syntax-color ambiance syntax-color-scheme :float)})\n   :float-nan-style                        (style {:color (styles/syntax-color ambiance syntax-color-scheme :float-nan)})\n   :float-infinity-style                   (style {:color (styles/syntax-color ambiance syntax-color-scheme :float-infinity)})\n   :string-style                           (style {:color (styles/syntax-color ambiance syntax-color-scheme :string)})\n   :symbol-style                           (style {:color (styles/syntax-color ambiance syntax-color-scheme :symbol)})\n   :bool-style                             (style {:color (styles/syntax-color ambiance syntax-color-scheme :bool)})\n   :native-reference-wrapper-style         (style {:position :relative\n                                                   :display  :inline-block})\n   :native-reference-style                 (style {:padding  [[0 (px 3)]]\n                                                   :margin   [[(px -4) 0 (px -2)]]\n                                                   :position :relative\n                                                   :top      (px 1)})\n   :type-wrapper-style                     (style {:position      :relative\n                                                   :padding-left  (px 1)\n                                                   :border-radius (px 2)})\n   :type-ref-style                         (style {:position :relative})\n   :type-header-style                      (style {:color               (styles/syntax-color ambiance syntax-color-scheme :type-text)\n                                                   :padding             [[0 (px 2) 0 (px 2)]]\n                                                   :-webkit-user-select :none\n                                                   :border-radius       (px 2)})\n   :type-name-style                        (style {:padding-right (px 4)})\n   :type-basis-style                       (style {:margin-right (px 3)})\n   :protocol-name-style                    (style {:position :relative})\n   :fast-protocol-style                    (style {:color               (styles/syntax-color ambiance syntax-color-scheme :fast-protocol)\n                                                   :position            :relative\n                                                   :padding             [[0 (px 4)]]\n                                                   :border-radius       (px 2)\n                                                   :-webkit-user-select :none})\n   :slow-protocol-style                    (style {:color               (styles/syntax-color ambiance syntax-color-scheme :slow-protocol)\n                                                   :position            :relative\n                                                   :padding             [[0 (px 4)]]\n                                                   :border-radius       (px 2)\n                                                   :-webkit-user-select :none})\n   :protocol-more-style                    (style {:font-size (px 8)\n                                                   :position  :relative})\n   :protocol-ns-name-style                 (style {:color (styles/syntax-color ambiance syntax-color-scheme :ns)})\n   :list-style                             \"\"\n   :body-field-name-style                  (style {:color (styles/syntax-color ambiance syntax-color-scheme :field)})\n   :body-field-value-style                 (style {:margin-left (px 6)})\n   :header-field-name-style                (style {:color (styles/syntax-color ambiance syntax-color-scheme :field)})\n   :body-field-td1-style                   (style {:vertical-align :top\n                                                   :padding        0\n                                                   :padding-right  (px 4)})\n   :body-field-td2-style                   (style {:vertical-align :top\n                                                   :padding        0})\n   :body-field-td3-style                   (style {:vertical-align :top\n                                                   :padding        0})\n   ;type-outline-style (css (str \"box-shadow: 0px 0px 0px 1px \" (named-color :type 0.5) \" inset;\")\n   ;     \"margin-top: 1px;\"\n   ;     \"border-radius: 2px;\")\n   ;:instance-header-style                  (style {#_#_:position :relative}) ;; type-outline-style\n   ;:expandable-wrapper-style               \"\"\n   ;:standalone-type-style                  \"\"               ;; type-outline-style\n   :instance-custom-printing-style         (style {:position :relative\n                                                   :padding  [[0 (px 2) 0 (px 4)]]})\n   :instance-custom-printing-wrapper-style (style {:position      :relative\n                                                   :border-radius (px 2)})\n   :instance-type-header-style             (style {:color               (styles/syntax-color ambiance syntax-color-scheme :type-text)\n                                                   :padding             [[0 (px 2) 0 (px 2)]]\n                                                   :-webkit-user-select :none\n                                                   :border-radius       [[(px 2) 0 0 (px 2)]]})\n   :instance-body-fields-table-style       (style {:border-spacing  0\n                                                   :border-collapse :collapse\n                                                   :margin-bottom   (px -2)\n                                                   :display         :inline-block})\n   :fields-header-style                    (style {:padding [[0 styles/gs-2]]})\n   :protocol-method-name-style             (style {:margin-right (px 6)\n                                                   :color        (styles/syntax-color ambiance syntax-color-scheme :protocol)})\n   :meta-wrapper-style                     (style {:box-shadow    [[0 0 0 (px 1) (styles/syntax-color ambiance syntax-color-scheme :meta) :inset]]\n                                                   :margin-top    (px 1)\n                                                   :border-radius (px 2)})\n   :meta-reference-style                   (style {:background-color (styles/syntax-color ambiance syntax-color-scheme :meta)\n                                                   :border-radius    [[0 (px 2) (px 2) 0]]})\n   :meta-style                             (style {:color               (styles/syntax-color ambiance syntax-color-scheme :meta-text)\n                                                   :padding             [[0 (px 3)]]\n                                                   :-webkit-user-select :none})\n   :meta-body-style                        (style {:background-color           (styles/syntax-color ambiance syntax-color-scheme :meta)\n                                                   :box-shadow                 [[0 0 0 (px 1) (styles/syntax-color ambiance syntax-color-scheme :meta) :inset]]\n                                                   :position                   :relative\n                                                   :top                        (px -1)\n                                                   :padding                    [[(px 3) (px 12)]]\n                                                   :border-bottom-right-radius (px 2)})\n   :fn-ns-name-style                       (style {:color (styles/syntax-color ambiance syntax-color-scheme :ns)})\n   :fn-name-style                          (style {:color        (styles/syntax-color ambiance syntax-color-scheme :fn)\n                                                   :margin-right (px 2)})\n   :fn-args-style                          (style {:color (styles/syntax-color ambiance syntax-color-scheme :fn-args)})\n   :fn-multi-arity-args-indent-style       (style {:visibility :hidden})\n   :standard-ol-style                      (style {:list-style-type :none\n                                                   :padding-left    0\n                                                   :margin-bottom   0\n                                                   :margin-left     0})\n   :standard-ol-no-margin-style            (style {:list-style-type :none\n                                                   :padding-left    0\n                                                   :margin-top      0\n                                                   :margin-bottom   0\n                                                   :margin-left     0})\n   :standard-li-style                      (style {:margin-left 0\n                                                   :min-height  (px 14)})\n   :standard-li-no-margin-style            (style {:margin-left 0\n                                                   :min-height  (px 14)})\n   :aligned-li-style                       (style {:margin-left 0\n                                                   :min-height  (px 14)})\n   :body-items-more-style                  (style {:background-color    (styles/syntax-color ambiance syntax-color-scheme :more-background)\n                                                   :min-width           styles/gs-50\n                                                   :display             :inline-block\n                                                   :color               (styles/syntax-color ambiance syntax-color-scheme :more)\n                                                   :cursor              :pointer\n                                                   :line-height         (px 14)\n                                                   :font-size           (px 10)\n                                                   :border-radius       (px 2)\n                                                   :padding             [[0 (px 4) 0 (px 4)]]\n                                                   :margin              [[(px 1) 0 0 0]]\n                                                   :-webkit-user-select :none})\n   :index-style                            (style {:min-width           styles/gs-50\n                                                   :display             :inline-block\n                                                   :text-align          :right\n                                                   :vertical-align      :text-top\n                                                   :background-color    (styles/syntax-color ambiance syntax-color-scheme :index-background)\n                                                   :color               (styles/syntax-color ambiance syntax-color-scheme :index)\n                                                   :opacity             0.5\n                                                   :margin-right        styles/gs-2\n                                                   :padding             [[0 styles/gs-2 0 styles/gs-2]]\n                                                   :margin              [[(px 1) 0 0 0]]\n                                                   :-webkit-user-select :none})\n   :expanded-string-style                  (style {:padding          [[0 styles/gs-12 0 styles/gs-12]]\n                                                   :color            (styles/syntax-color ambiance syntax-color-scheme :string)\n                                                   :white-space      :pre\n                                                   :border           [[(px 1) :solid (styles/syntax-color ambiance syntax-color-scheme :expanded-string-border)]]\n                                                   :border-radius    (px 1)\n                                                   :margin           [[0 0 (px 2) 0]]\n                                                   :background-color (styles/syntax-color ambiance syntax-color-scheme :expanded-string-background)})\n   :default-envelope-style                 \"\"\n   ;; Setting this prevents https://github.com/day8/re-frame-10x/issues/321\n   :max-number-body-items                  10000})\n\n\n\n\n\n(def body-style-base\n  {:display          :inline-block\n   :padding          [[styles/gs-2 styles/gs-12]]\n   :border           [[(px 1) :solid styles/nord3]]\n   :margin           (px 1)\n   :margin-top       0})\n\n\n(def dark-ambiance-config\n  {:cljs-land-style (style {:background-color styles/nord0\n                            :color            styles/nord6})\n   :body-style      (style body-style-base {:background-color styles/nord0})})\n\n(def bright-ambiance-config\n  {:cljs-land-style (style {:background-color styles/nord6\n                            :color            styles/nord0})\n   :body-style      (style body-style-base {:background-color styles/nord6})})\n\n;; This used to be in the api-call fn below. However, recalculating this on *every* render is expensive so moved\n;; here as static def.\n;; TODO: If we expose ambiance and/or syntax color scheme as settings will need to fix this, maybe by recalculating\n;; at the time the setting is changed/loaded.\n(def custom-config\n  (merge default-config (base-config :bright :cljs-devtools) #_bright-ambiance-config))\n\n(defn header [value config & [{:keys [render-paths?]}]]\n  (with-cljs-devtools-prefs\n    (if render-paths?\n      (merge custom-config {:render-path-annotations       true})\n      custom-config)\n    (devtools.formatters.core/header-api-call value config)))\n\n(defn body [value config & [{:keys [render-paths?]}]]\n  (with-cljs-devtools-prefs\n    (if render-paths?\n      (merge custom-config {:render-path-annotations       true})\n      custom-config)\n    (devtools.formatters.core/body-api-call value config)))\n\n(defn has-body [value config]\n  (with-cljs-devtools-prefs custom-config\n    (devtools.formatters.core/has-body-api-call value config)))\n\n(defn get-object [jsonml]\n  (.-object (get jsonml 1)))\n\n(defn get-config [jsonml]\n  (.-config (get jsonml 1)))\n\n(declare jsonml->hiccup)\n(declare jsonml->hiccup-with-path-annotations)\n\n(defclass jsonml-style\n  []\n  {:display          :inline\n   :flex-direction   :row\n   :background-color (styles/syntax-color :bright :cljs-devtools :signature-background)}\n  [\"> span\"\n   {:vertical-align :text-top}]\n  [:li\n   {:margin 0}])\n\n(defclass toggle-style\n  [ambiance]\n  {:cursor      :pointer\n   :display     :inline\n   :align-self  :center\n   #_#_:line-height 1}\n  [:button\n   {:cursor :pointer\n    :background :none\n    :border :none}]\n  [:svg :path\n   {:fill (if (= ambiance :bright) styles/nord0 styles/nord5)}])\n\n(defn data-structure [_ path]\n  (let [expanded? (rf/subscribe [::app-db.subs/node-expanded? path])]\n    (fn [jsonml path]\n      [:span\n       {:class (jsonml-style)}\n       [:span {:class    (toggle-style :bright)\n               :on-click #(rf/dispatch [::app-db.events/toggle-expansion path])}\n        [:button\n         (if @expanded?\n           [material/arrow-drop-down]\n           [material/arrow-right])]]\n       (if (and @expanded? (has-body (get-object jsonml) (get-config jsonml)))\n         (jsonml->hiccup\n           (body\n             (get-object jsonml)\n             (get-config jsonml))\n           (conj path :body))\n         (jsonml->hiccup\n           (header\n             (get-object jsonml)\n             (get-config jsonml))\n           (conj path :header)))])))\n\n(defn data-structure-with-path-annotations [_ indexed-path devtools-path {:keys [update-path-fn object] :as opts}]\n  (let [expanded?     (rf/subscribe [::app-db.subs/node-expanded? indexed-path])\n        render-paths? (rf/subscribe [::app-db.subs/data-path-annotations?])]\n    (fn [jsonml indexed-path]\n      [:span\n       {:class (jsonml-style)}\n       [:span {:class    (toggle-style :bright)\n               :on-click #(rf/dispatch [::app-db.events/toggle-expansion indexed-path])}\n        [:button\n         (if @expanded?\n           [material/arrow-drop-down]\n           [material/arrow-right])]]\n       (if (and @expanded? (has-body (get-object jsonml) (get-config jsonml)))\n         (jsonml->hiccup-with-path-annotations\n           (body\n             (get-object jsonml)\n             (get-config jsonml)\n             {:render-paths? @render-paths?})\n           (conj indexed-path :body)\n           devtools-path\n           opts)\n         (jsonml->hiccup-with-path-annotations\n           (header\n             (get-object jsonml)\n             (get-config jsonml))\n           (conj indexed-path :header)\n           devtools-path\n           opts))])))\n\n(defn string->css\n  \"This function converts jsonml css-strings to valid css maps for hiccup.\n  Example: 'margin-left:0px;min-height:14px;' converts to\n           {:margin-left '0px', :min-height '14px'}\"\n  [css-string]\n  (->> (string/split css-string #\";\")\n       (map #(string/split % #\":\"))\n       (reduce (fn [acc [property value]]\n                 (assoc acc (keyword property) value)) {})))\n\n(defn jsonml->hiccup\n  \"JSONML is the format used by Chrome's Custom Object Formatters.\n  The spec is at https://docs.google.com/document/d/1FTascZXT9cxfetuPRT2eXPQKXui4nWFivUnS_335T3U/preview.\n\n  JSONML is pretty much Hiccup over JSON. Chrome's implementation of this can\n  be found at https://cs.chromium.org/chromium/src/third_party/WebKit/Source/devtools/front_end/object_ui/CustomPreviewComponent.js\n  \"\n  [jsonml path]\n  (if (number? jsonml)\n    jsonml\n    (let [[tag-name attributes & children] jsonml\n          tagnames #{\"div\" \"span\" \"ol\" \"li\" \"table\" \"tr\" \"td\"}]\n      (cond\n        (contains? tagnames tag-name) (into\n                                        [(keyword tag-name) {:style (-> (js->clj attributes)\n                                                                        (get \"style\")\n                                                                        (string->css))}]\n                                        (map-indexed (fn [i child] (jsonml->hiccup child (conj path i))))\n                                        children)\n\n        (= tag-name \"object\") [data-structure jsonml path]\n        (= tag-name \"annotation\") (into [:span {}]\n                                        (map-indexed (fn [i child] (jsonml->hiccup child (conj path i))))\n                                        children)\n        :else jsonml))))\n\n(defn jsonml->hiccup-with-path-annotations\n  \"JSONML is the format used by Chrome's Custom Object Formatters.\n  The spec is at https://docs.google.com/document/d/1FTascZXT9cxfetuPRT2eXPQKXui4nWFivUnS_335T3U/preview.\n\n  JSONML is pretty much Hiccup over JSON. Chrome's implementation of this can\n  be found at https://cs.chromium.org/chromium/src/third_party/WebKit/Source/devtools/front_end/object_ui/CustomPreviewComponent.js\n  \"\n  [jsonml indexed-path devtools-path {:keys [update-path-fn object click-listener menu-listener] :as opts}]\n  (if (number? jsonml)\n    jsonml\n    (let [[tag-name attributes & children] jsonml\n          tagnames #{\"div\" \"span\" \"ol\" \"li\" \"table\" \"tr\" \"td\"}]\n      (cond\n        (contains? tagnames tag-name) (into\n                                        [(keyword tag-name) {:style (-> (js->clj attributes)\n                                                                        (get \"style\")\n                                                                        (string->css))}]\n                                        (map-indexed (fn [i child] (jsonml->hiccup-with-path-annotations child (conj indexed-path i) devtools-path opts)))\n                                        children)\n\n        (= tag-name \"object\") [data-structure-with-path-annotations jsonml indexed-path devtools-path opts]\n        (= tag-name \"annotation\") (let [index         (-> attributes\n                                                          (js->clj :keywordize-keys true)\n                                                          :path\n                                                          last)\n                                        devtools-path (if index (conj devtools-path index) devtools-path)\n                                        id            (-> (random-uuid) str)\n                                        child-element (nth children 0 nil)\n                                        child-value   (when (instance? js/Array child-element)\n                                                        (nth child-element 2 nil))]\n                                    ;; add menu only to strings, numbers and keywords\n                                    (if (or (string? child-value)\n                                            (number? child-value)\n                                            (keyword? child-value))\n                                      [:> (r/create-class\n                                            {:component-did-mount (fn [component]\n                                                                    (let [component (dom/dom-node component)]\n                                                                      (goog.events/listen component \"contextmenu\" (partial menu-listener object))\n                                                                      (goog.events/listen component \"click\" click-listener)))\n                                             :reagent-render      (fn []\n                                                                    (into [:span {:id        id\n                                                                                  :class     \"path-annotation\"\n                                                                                  :data-path (str devtools-path)}]\n                                                                          (map-indexed (fn [i child] (jsonml->hiccup-with-path-annotations child (conj indexed-path i) devtools-path opts)) children)))})]\n                                      (into [:span {}]\n                                            (map-indexed (fn [i child] (jsonml->hiccup-with-path-annotations child (conj indexed-path i) devtools-path opts)) children))))\n        :else jsonml))))\n\n(defn prn-str-render?\n  [data]\n  (or (string? data)\n      (instance? js/RegExp data)\n      (number? data)\n      (boolean? data)\n      (nil? data)))\n\n(defclass prn-str-render-style\n  []\n  {:background-color (styles/syntax-color :bright :cljs-devtools :signature-background)\n   :color            (styles/syntax-color :bright :cljs-devtools :bool)})\n\n(defn prn-str-render\n  [data]\n  [:div {:class (prn-str-render-style)}\n   (prn-str data)])\n\n(defn simple-render\n  [data path & [class]]\n  [rc/box\n   :size  \"1\"\n   :class (str (jsonml-style) \" \" class)\n   :child\n   (if (prn-str-render? data)\n     (prn-str-render data)\n     (jsonml->hiccup (header data nil) (conj path 0)))])\n\n(def popup-menus (atom {}))                                 ;; stores all the current rendered menus to prevent re-rendering the same menu twice\n(def event-log (atom (list )))                              ;;stores a history of the events, treated as a stack\n\n;; `html-element` is the html element that has received the right click\n;; `data` is the clj data from db that is passed to devtools\n;; `path` is the current path at the point where the popup is clicked in `data`\n;; `viewing path` is the path that is filled in the input box (if any) when the popup is opening\n(defn build-popup\n  [data path viewing-path html-element]\n  (if-let [rendered? (get @popup-menus (.-id html-element))]\n    (.setVisible rendered? true)                            ;; we have already rendered the menu, proceed to display it\n    (let [popup-menu       (goog.ui.PopupMenu.)\n          js-menu-style    (-> #js {:text-align \"center\"\n                                    :padding    \"10px 0\"\n                                    :border     \"1px solid black\"}\n                               (goog.style.toStyleAttribute))\n          create-menu-item (fn [menu-text]\n                             (-> (goog.dom.createDom\n                                   TagName.DIV\n                                   #js {}\n                                   (goog.dom.createDom TagName.SPAN #js {} menu-text))\n                                 (doto (.setAttribute \"style\" js-menu-style))\n                                 goog.ui.MenuItem.))\n          copy-path-item   (create-menu-item \"Copy path\")\n          copy-obj-item    (create-menu-item \"Copy object\")\n          copy-repl-item   (create-menu-item \"Copy REPL command\")\n          element-rect     (.getBoundingClientRect html-element)\n          x-pos            (+ (.-left element-rect) (.-scrollX js/window))\n          y-pos            (+ (.-top element-rect) (.-scrollY js/window))]\n      (doto copy-path-item\n        (.addClassName \"copy-path\")\n        (.addClassName \"10x-menu-item\"))\n      (doto copy-obj-item\n        (.addClassName \"copy-object\")\n        (.addClassName \"10x-menu-item\"))\n      (doto copy-repl-item\n        (.addClassName \"copy-repl\")\n        (.addClassName \"10x-menu-item\"))\n      (doto popup-menu\n        (.addItem copy-path-item)\n        (.addItem copy-obj-item)\n        (.addItem copy-repl-item)\n        (.showAt x-pos y-pos)\n        (.render html-element))\n      (goog.object.forEach\n        goog.ui.Component.EventType\n        (fn [type]\n          (goog.events.listen\n            popup-menu\n            type\n            (fn [e] (cond\n                      (= (.-type e) \"hide\")\n                      (when-not (or (empty? @event-log) (= (peek @event-log) \"unhighlight\"))\n                        ;; if the last event registered is 'unhighlight' then we should close the dialog\n                        ;; `unhighlight` is dispatched when the mouse leaves a menu item\n                        ;; if the mouse icon would scroll over another item in the menu, a `highlight` event would\n                        ;; overwrite the last `unhighlight`\n                        (.preventDefault e))\n\n                      (= (.-type e) \"action\")\n                      (let [class-names (-> e .-target .getExtraClassNames js->clj)]\n                        (swap! event-log conj \"action\")\n                        (cond\n                          (some (fn [class-name] (= class-name \"copy-object\")) class-names)\n                          (let [path-obj (reader.edn/read-string-maybe path)\n                                nested?  (when viewing-path\n                                           (count viewing-path))\n                                path-obj (if nested?\n                                           (subvec path-obj nested?) ;; both path and viewing-path are from the root point of view\n                                           path-obj)\n                                object   (get-in data path-obj)]\n                            ;; note we can't copy nil objects\n                            (if (or object (and (not (nil? object)) (= object false)))\n                              (clipboard/copy! object)\n                              (js/console.error \"Could not copy!\")))\n\n                          (some (fn [class-name] (= class-name \"copy-path\")) class-names)\n                          (clipboard/copy! path)\n\n                          (some (fn [class-name] (= class-name \"copy-repl\")) class-names)\n                          (clipboard/copy! (str \"(simple-render-with-path-annotations \" data \" \" [\"app-db-path\" path] {} \")\"))))\n\n                      :else\n                      (swap! event-log conj (.-type e)))))))\n      (swap! popup-menus assoc (.-id html-element) popup-menu))))\n\n(def current-data (atom nil))\n\n(defn simple-render-with-path-annotations\n  [data indexed-path {:keys [update-path-fn sort?] :as opts} & [class]]\n  (when (not= @current-data data)\n    (reset! current-data data))\n  (let [render-paths?   (rf/subscribe [::app-db.subs/data-path-annotations?])\n        data            (if (and sort? (map? data)) (into (sorted-map) data) data)\n        devtools-path   (second indexed-path)\n        ;; triggered during `contextmenu` event when a path annotation is right clicked\n        menu-listener   (fn [obj event]\n                          ;; at this stage `data` might have changed\n                          ;; we have to rely on `current-data` alias `obj`\n                          (let [target (-> event .-target .-parentElement)\n                                path   (.getAttribute target \"data-path\")]\n                            (.preventDefault event)\n                            (build-popup @obj path devtools-path target)))\n        ;; triggered during `click` event when a path annotation is clicked\n        click-listener  (fn [event]\n                          (let [target (-> event .-target .-parentElement)\n                                path   (.getAttribute target \"data-path\")\n                                btn    (.-button event)]\n                            (when (= btn 0)                 ;;left click btn\n                              (rf/dispatch (conj update-path-fn path)))))]\n    [rc/box\n     :size \"1\"\n     :class (str (jsonml-style) \" \" class)\n     :child\n     (if (prn-str-render? data)\n       (prn-str-render data)\n       (jsonml->hiccup-with-path-annotations\n         (header data nil {:render-paths? @render-paths?})\n         (conj indexed-path 0)\n         (or devtools-path [])\n         (assoc opts\n           :object current-data\n           :click-listener click-listener\n           :menu-listener menu-listener)))]))"]}